// MCPServerMacroImplementation.swift - New file for macro implementation
import SwiftSyntax
import SwiftSyntaxBuilder
import SwiftSyntaxMacros
import SwiftCompilerPlugin

public struct ServerMacro: MemberMacro {
    public static func expansion(
        of node: AttributeSyntax,
        providingMembersOf declaration: some DeclGroupSyntax,
        in context: some MacroExpansionContext
    ) throws -> [DeclSyntax] {
        
        // Extract the server type from the macro arguments
        guard let arguments = node.arguments,
              case let .argumentList(argumentList) = arguments,
              let firstArgument = argumentList.first,
              let labeledExpression = firstArgument.expression.as(MemberAccessExprSyntax.self) else {
            throw MacroError.invalidArguments
        }
        
        let serverTypeName = labeledExpression.declName.baseName.text
        
        // Ensure this is applied to a struct
        guard let structDecl = declaration.as(StructDeclSyntax.self) else {
            throw MacroError.invalidDeclaration
        }
        
        // Generate the appropriate startup code based on server type
        let startupCode: String
        switch serverTypeName {
        case "stdio":
            startupCode = "try await server.startStdioServer()"
        default:
            // Future server types can be handled here
            startupCode = "try await server.startStdioServer()"
        }
        
        // Create a static main method that starts the server
        let mainMethod: DeclSyntax = """
        public static func main() async throws {
            // Auto-generated by @Server macro
            \(raw: startupCode)
        }
        """
        
        return [mainMethod]
    }
}

enum MacroError: Error, CustomStringConvertible {
    case invalidArguments
    case invalidDeclaration
    
    var description: String {
        switch self {
        case .invalidArguments:
            return "Invalid macro arguments"
        case .invalidDeclaration:
            return "Macro can only be applied to struct declarations"
        }
    }
}